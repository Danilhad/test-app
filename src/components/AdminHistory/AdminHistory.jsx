// src/components/AdminHistory/AdminHistory.jsx
import React, { useState, useEffect } from 'react';
import { operationsService } from '../../services/firebaseService';
import { useShopContext } from '../../context/ShopContext.jsx';

const AdminHistory = () => {
  const { products } = useShopContext();
  const [operations, setOperations] = useState([]);
  const [loading, setLoading] = useState(true);
  const [filter, setFilter] = useState('all'); // all, update_quantity, order, etc.

  useEffect(() => {
    const loadOperations = async () => {
      try {
        const ops = await operationsService.getOperations();
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É)
        const sortedOps = ops.sort((a, b) => (b.timestamp || 0) - (a.timestamp || 0));
        setOperations(sortedOps);
      } catch (error) {
        console.error('Error loading operations:', error);
      } finally {
        setLoading(false);
      }
    };

    loadOperations();

    // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    const unsubscribe = operationsService.subscribeToOperations((ops) => {
      const sortedOps = ops.sort((a, b) => (b.timestamp || 0) - (a.timestamp || 0));
      setOperations(sortedOps);
    });
    
    return unsubscribe;
  }, []);

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π
  const filteredOperations = filter === 'all' 
    ? operations 
    : operations.filter(op => op.action === filter);

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
  const formatDate = (timestamp) => {
    if (!timestamp) return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –¥–∞—Ç–∞';
    
    const date = new Date(timestamp);
    const now = new Date();
    const diffTime = Math.abs(now - date);
    const diffDays = Math.floor(diffTime / (1000 * 60 * 60 * 24));
    
    if (diffDays === 0) {
      // –°–µ–≥–æ–¥–Ω—è
      return `–°–µ–≥–æ–¥–Ω—è –≤ ${date.toLocaleTimeString('ru-RU', {
        hour: '2-digit',
        minute: '2-digit'
      })}`;
    } else if (diffDays === 1) {
      // –í—á–µ—Ä–∞
      return `–í—á–µ—Ä–∞ –≤ ${date.toLocaleTimeString('ru-RU', {
        hour: '2-digit',
        minute: '2-digit'
      })}`;
    } else if (diffDays < 7) {
      // –ù–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ
      const days = ['–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ', '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞'];
      return `${days[date.getDay()]} –≤ ${date.toLocaleTimeString('ru-RU', {
        hour: '2-digit',
        minute: '2-digit'
      })}`;
    } else {
      // –†–∞–Ω–µ–µ
      return date.toLocaleDateString('ru-RU', {
        day: '2-digit',
        month: '2-digit',
        year: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
      });
    }
  };

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –¥–ª—è —Ç–∏–ø–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏
  const getOperationIcon = (action) => {
  switch (action) {
    case 'inventory_update':
    case 'quantity_update':
      return 'üì¶';
    case 'order_create':
      return 'üõí';
    case 'order_cancel':
      return '‚ùå';
    case 'order_complete':
      return '‚úÖ';
    case 'product_create':
      return '‚ûï';
    case 'product_delete':
      return 'üóëÔ∏è';
    case 'system_error':
      return '‚ö†Ô∏è';
    default:
      return 'üìã';
  }
};

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–∏–ø–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏
  const getOperationType = (action) => {
  const actionMap = {
    'inventory_update': '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è',
    'quantity_update': '–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞',
    'product_create': '–°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞',
    'product_update': '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞',
    'product_delete': '–£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞',
    'order_create': '–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞',
    'order_status_update': '–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞',
    'order_cancel': '–û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞',
    'order_complete': '–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞',
    'user_login': '–í—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
    'system_error': '–°–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞'
  };
  return actionMap[action] || action;
};

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –¥–ª—è —Ç–∏–ø–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏
  const getOperationColor = (action) => {
    switch (action) {
      case 'update_quantity':
        return 'bg-blue-500/20 text-blue-300';
      case 'create_order':
        return 'bg-green-500/20 text-green-300';
      case 'cancel_order':
        return 'bg-red-500/20 text-red-300';
      case 'complete_order':
        return 'bg-purple-500/20 text-purple-300';
      default:
        return 'bg-gray-500/20 text-gray-300';
    }
  };

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏
  const getOperationDescription = (operation) => {
    switch (operation.action) {
      case 'update_quantity':
        return `–û–±–Ω–æ–≤–ª–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤`;
      case 'create_order':
        return `–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑`;
      case 'cancel_order':
        return `–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω`;
      case 'complete_order':
        return `–ó–∞–∫–∞–∑ –∑–∞–≤–µ—Ä—à–µ–Ω`;
      default:
        return `–í—ã–ø–æ–ª–Ω–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏—è: ${operation.action}`;
    }
  };

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
  const getOperationDetails = (operation) => {
    switch (operation.action) {
      case 'update_quantity':
        return operation.adminId && operation.adminId !== 'unknown' 
          ? `–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: ${operation.adminId}` 
          : '–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞';
      case 'create_order':
        return operation.total > 0 
          ? `–°—É–º–º–∞: ${operation.total} —Ä—É–±.` 
          : '–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω';
      default:
        return operation.status 
          ? `–°—Ç–∞—Ç—É—Å: ${operation.status}` 
          : '–û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞';
    }
  };

  if (loading) {
    return (
      <div className="max-w-6xl mx-auto p-4 min-h-screen flex items-center justify-center">
        <div className="text-white text-xl">–ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏...</div>
      </div>
    );
  }

  return (
    <div className="max-w-4xl mx-auto p-4 min-h-screen">
      {/* –≠—Ñ—Ñ–µ–∫—Ç –∂–∏–¥–∫–æ–≥–æ —Å—Ç–µ–∫–ª–∞ –¥–ª—è —Ñ–æ–Ω–∞ */}
      <div className="absolute inset-0 bg-gradient-to-t from-white/5 to-transparent"></div>
      <div className="absolute inset-0 bg-[radial-gradient(circle_at_50%_0%,rgba(255,255,255,0.1),transparent_70%)]"></div>
      
      <div className="relative z-10">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏—è */}
        <div className="flex items-center justify-between mb-6">
          <h1 className="text-2xl font-bold text-white drop-shadow-sm">üìä –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π</h1>
          <button
            onClick={() => window.history.back()}
            className="
              px-4 py-2 rounded
              bg-white/10 backdrop-blur-md
              border border-white/20 border-b-white/40 border-r-white/40
              text-white hover:bg-white/15
              transition-all duration-300 transform hover:scale-105
            "
          >
            ‚Üê –ù–∞–∑–∞–¥
          </button>
        </div>

        {/* –§–∏–ª—å—Ç—Ä—ã */}
        <div className="
          p-4 rounded-2xl mb-6
          bg-white/10 backdrop-blur-2xl
          border border-white/20 border-b-white/40 border-r-white/40
          shadow-2xl
        ">
          <h2 className="text-lg font-semibold mb-3 text-white">–§–∏–ª—å—Ç—Ä—ã</h2>
          <div className="flex flex-wrap gap-2">
            <button
              onClick={() => setFilter('all')}
              className={`px-3 py-1 rounded-lg transition-all ${
                filter === 'all' 
                  ? 'bg-blue-500 text-white' 
                  : 'bg-white/10 text-white/70 hover:bg-white/20'
              }`}
            >
              –í—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
            </button>
            <button
              onClick={() => setFilter('update_quantity')}
              className={`px-3 py-1 rounded-lg transition-all ${
                filter === 'update_quantity' 
                  ? 'bg-blue-500 text-white' 
                  : 'bg-white/10 text-white/70 hover:bg-white/20'
              }`}
            >
              üì¶ –û–±–Ω–æ–≤–ª–µ–Ω–∏—è
            </button>
            <button
              onClick={() => setFilter('create_order')}
              className={`px-3 py-1 rounded-lg transition-all ${
                filter === 'create_order' 
                  ? 'bg-blue-500 text-white' 
                  : 'bg-white/10 text-white/70 hover:bg-white/20'
              }`}
            >
              üõí –ó–∞–∫–∞–∑—ã
            </button>
          </div>
        </div>

        {/* –°–ø–∏—Å–æ–∫ –æ–ø–µ—Ä–∞—Ü–∏–π */}
        <div className="
          rounded-2xl
          bg-white/10 backdrop-blur-2xl
          border border-white/20 border-b-white/40 border-r-white/40
          shadow-2xl
        ">
          <h2 className="text-xl font-semibold p-6 text-white border-b border-white/20">
            üìã –°–ø–∏—Å–æ–∫ –æ–ø–µ—Ä–∞—Ü–∏–π ({filteredOperations.length})
          </h2>
          
          <div className="max-h-96 overflow-y-auto">
            {filteredOperations.length === 0 ? (
              <div className="text-center text-white/60 py-8">
                <div className="text-4xl mb-2">üì≠</div>
                <p>–ù–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è</p>
                <p className="text-sm mt-1">–ó–¥–µ—Å—å –±—É–¥—É—Ç –ø–æ—è–≤–ª—è—Ç—å—Å—è –≤–∞—à–∏ –¥–µ–π—Å—Ç–≤–∏—è –≤ —Å–∏—Å—Ç–µ–º–µ</p>
              </div>
            ) : (
              <div className="divide-y divide-white/10">
                {filteredOperations.map((operation, index) => (
                  <div key={operation.id || index} className="p-4 hover:bg-white/5 transition-colors">
                    <div className="flex items-start gap-3">
                      {/* –ò–∫–æ–Ω–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ */}
                      <div className="text-2xl mt-1">
                        {getOperationIcon(operation.action)}
                      </div>
                      
                      {/* –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ */}
                      <div className="flex-1 min-w-0">
                        <div className="flex items-center gap-2 mb-1">
                          <span className={`px-2 py-1 rounded-md text-xs font-medium ${getOperationColor(operation.action)}`}>
                            {getOperationType(operation.action)}
                          </span>
                          <span className="text-white/60 text-sm">
                            {formatDate(operation.timestamp)}
                          </span>
                        </div>
                        
                        <p className="text-white font-medium mb-1">
                          {getOperationDescription(operation)}
                        </p>
                        
                        <p className="text-white/70 text-sm mb-2">
                          {getOperationDetails(operation)}
                        </p>
                        
                        {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
                        <div className="flex flex-wrap gap-3 text-xs text-white/50">
                          {operation.adminId && operation.adminId !== 'unknown' && (
                            <span>üë§ –ê–¥–º–∏–Ω: {operation.adminId}</span>
                          )}
                          {operation.orderId && (
                            <span>üìã –ó–∞–∫–∞–∑: #{operation.orderId}</span>
                          )}
                          {operation.total > 0 && (
                            <span>üí∞ –°—É–º–º–∞: {operation.total} —Ä—É–±.</span>
                          )}
                          {operation.status && (
                            <span>üìä –°—Ç–∞—Ç—É—Å: {operation.status}</span>
                          )}
                        </div>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            )}
          </div>
        </div>

        {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
        {operations.length > 0 && (
          <div className="
            p-4 rounded-2xl mt-6
            bg-white/10 backdrop-blur-2xl
            border border-white/20 border-b-white/40 border-r-white/40
            shadow-2xl
          ">
            <h3 className="text-lg font-semibold mb-3 text-white">üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h3>
            <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
              <div className="text-center p-3 rounded-xl bg-white/5">
                <div className="text-2xl">üìã</div>
                <div className="text-white font-semibold">{operations.length}</div>
                <div className="text-white/60 text-sm">–í—Å–µ–≥–æ –æ–ø–µ—Ä–∞—Ü–∏–π</div>
              </div>
              <div className="text-center p-3 rounded-xl bg-white/5">
                <div className="text-2xl">üì¶</div>
                <div className="text-white font-semibold">
                  {operations.filter(op => op.action === 'update_quantity').length}
                </div>
                <div className="text-white/60 text-sm">–û–±–Ω–æ–≤–ª–µ–Ω–∏–π</div>
              </div>
              <div className="text-center p-3 rounded-xl bg-white/5">
                <div className="text-2xl">üõí</div>
                <div className="text-white font-semibold">
                  {operations.filter(op => op.action === 'create_order').length}
                </div>
                <div className="text-white/60 text-sm">–ó–∞–∫–∞–∑–æ–≤</div>
              </div>
              <div className="text-center p-3 rounded-xl bg-white/5">
                <div className="text-2xl">‚è∞</div>
                <div className="text-white font-semibold">
                  {formatDate(operations[0]?.timestamp)}
                </div>
                <div className="text-white/60 text-sm">–ü–æ—Å–ª–µ–¥–Ω—è—è –æ–ø–µ—Ä–∞—Ü–∏—è</div>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default AdminHistory;