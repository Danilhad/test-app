// src/context/ShopContext.jsx
import React, { createContext, useContext, useState, useEffect } from 'react';
import { 
  productsService, 
  ordersService, 
  operationsService 
} from '../services/firebaseService';
import { auth } from '../firebase/config';
import { onAuthStateChanged } from 'firebase/auth';

const ShopContext = createContext();

export const useShopContext = () => {
  const context = useContext(ShopContext);
  if (!context) {
    throw new Error('useShopContext must be used within a ShopProvider');
  }
  return context;
};

export const ShopProvider = ({ children }) => {
  const [products, setProducts] = useState([]);
  const [orders, setOrders] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [user, setUser] = useState(null);
   const [activeCategory, setActiveCategory] = useState('all'); 
  
  // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
  const [productSheet, setProductSheet] = useState({
    isOpen: false,
    product: null
  });
  const [showOrderView, setShowOrderView] = useState(false);

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤
  // –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤
useEffect(() => {
  const loadProducts = async () => {
    try {
      setLoading(true);
      setError(null);
      console.log('üîÑ Loading products from Firebase...');
      
      const productsData = await productsService.getProducts();
      console.log('üì¶ Products loaded:', productsData);
      console.log('üì¶ Number of products:', productsData.length);
      
      if (productsData.length > 0) {
        console.log('üì¶ First product:', productsData[0]);
      }
      
      setProducts(productsData);
    } catch (err) {
      console.error('‚ùå Error loading products:', err);
      setError(err.message);
      setProducts([]);
    } finally {
      setLoading(false);
    }
  };

  loadProducts();

    // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤
    const unsubscribeProducts = productsService.subscribeToProducts((updatedProducts) => {
    console.log('üîÑ Products updated:', updatedProducts.length, 'items');
    setProducts(updatedProducts);
    setError(null);
  });

  return unsubscribeProducts;
}, []);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–∫–∞–∑–æ–≤
  useEffect(() => {
  const loadOrders = async () => {
    try {
      console.log('üîÑ Loading orders...');
      const ordersData = await ordersService.getOrders();
      setOrders(ordersData);
    } catch (err) {
      console.warn('‚ö†Ô∏è Error loading orders, using empty array:', err.message);
      setOrders([]);
    }
  };

  loadOrders();

  }, []);

  // –°–ª—É—à–∞—Ç–µ–ª—å —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
  useEffect(() => {
    const unsubscribe = onAuthStateChanged(auth, (user) => {
      setUser(user);
    });

    return unsubscribe;
  }, []);

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–æ–≤–∞—Ä–∞–º–∏
  const updateProductQuantity = async (productId, size, newQuantity) => {
    try {
      await productsService.updateProductQuantity(productId, size, newQuantity);
      
      await operationsService.addOperation({
        action: 'update_quantity',
        productId,
        size,
        quantity: newQuantity,
        adminId: user?.uid || 'unknown'
      });
    } catch (error) {
      console.error('Error updating product quantity:', error);
      throw error;
    }
  };

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–∫–∞–∑–∞–º–∏
  const createOrder = async (orderData) => {
    try {
      const orderId = await ordersService.createOrder(orderData);
      
      await operationsService.addOperation({
        action: 'create_order',
        orderId,
        total: orderData.total,
        customer: orderData.customerName,
        adminId: user?.uid || 'unknown'
      });
      
      return orderId;
    } catch (error) {
      console.error('Error creating order:', error);
      throw error;
    }
  };

  const updateOrderStatus = async (orderId, status) => {
    try {
      await ordersService.updateOrderStatus(orderId, status);
      
      await operationsService.addOperation({
        action: 'update_order_status',
        orderId,
        status,
        adminId: user?.uid || 'unknown'
      });
    } catch (error) {
      console.error('Error updating order status:', error);
      throw error;
    }
  };

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–æ–¥–∞–ª—å–Ω—ã–º–∏ –æ–∫–Ω–∞–º–∏
  const openProductSheet = (product) => {
    setProductSheet({
      isOpen: true,
      product: product
    });
  };

  const closeProductSheet = () => {
    setProductSheet({
      isOpen: false,
      product: null
    });
  };

  const toggleOrderView = () => {
    setShowOrderView(prev => !prev);
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ä–∞–∑–º–µ—Ä–∞
  const checkSizeAvailability = (productId, size) => {
    const product = products.find(p => p.id === productId);
    if (!product || !product.sizes) return false;
    
    const sizeItem = product.sizes.find(s => s.size === size);
    if (!sizeItem) return false;
    
    const availableQuantity = sizeItem.quantity - (sizeItem.reserved || 0);
    return availableQuantity > 0;
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É
  const addToCart = (item) => {
    // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É
    console.log('Adding to cart:', item);
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª–æ –±—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã
  };

  const value = {
    products,
    orders,
    loading,
    error,
    user,
    activeCategory, // –î–æ–±–∞–≤–ª–µ–Ω–æ
    productSheet,
    showOrderView,
    setActiveCategory, // –î–æ–±–∞–≤–ª–µ–Ω–æ - —ç—Ç–æ –æ—á–µ–Ω—å –≤–∞–∂–Ω–æ!
    updateProductQuantity,
    createOrder,
    updateOrderStatus,
    openProductSheet,
    closeProductSheet,
    toggleOrderView,
    checkSizeAvailability,
    addToCart
  };
  

  return (
    <ShopContext.Provider value={value}>
      {children}
    </ShopContext.Provider>
  );
};